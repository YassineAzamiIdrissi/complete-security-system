/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCar } from '../fn/car/add-car';
import { AddCar$Params } from '../fn/car/add-car';
import { CarResponse } from '../models/car-response';
import { getAllCars } from '../fn/car/get-all-cars';
import { GetAllCars$Params } from '../fn/car/get-all-cars';

@Injectable({ providedIn: 'root' })
export class CarService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllCars()` */
  static readonly GetAllCarsPath = '/cars';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCars()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCars$Response(params?: GetAllCars$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CarResponse>>> {
    return getAllCars(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCars$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCars(params?: GetAllCars$Params, context?: HttpContext): Observable<Array<CarResponse>> {
    return this.getAllCars$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CarResponse>>): Array<CarResponse> => r.body)
    );
  }

  /** Path part for operation `addCar()` */
  static readonly AddCarPath = '/cars';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCar()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCar$Response(params: AddCar$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addCar(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCar$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCar(params: AddCar$Params, context?: HttpContext): Observable<number> {
    return this.addCar$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
